/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Cajero;

import Bitacora.Transaccion;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author USUARIO
 */
public class Retiro extends javax.swing.JPanel {
    Connection conexion;
    PrincipalCajero padre;
    private Transaccion bitacora;
    /**
     * Creates new form Retiro
     */
    public Retiro() {
        initComponents();
    }
    
    public Retiro(PrincipalCajero padre, Connection conexion) {
        initComponents();
        this.padre = padre;
        this.conexion = conexion;
        bitacora = new Transaccion(conexion);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Q300.00");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("Q100.00");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("Q200.00");
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });
        jLabel3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jLabel3KeyPressed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel4.setText("Q2000.00");
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel5.setText("Q500.00");
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel6.setText("Q1000.00");
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel7.setText("Salir");
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        try {
            conexion.createStatement().executeUpdate("START TRANSACTION");
            bitacora.iniciar();
            String instruccion = "SELECT cuenta.Saldo FROM cuenta WHERE cuenta.Id = "+padre.Id+";";
            bitacora.almacenarSentenciaSQL(instruccion);
            ResultSet Rsaldo = conexion.createStatement().executeQuery(instruccion);
            Rsaldo.next();
            if(Rsaldo.getFloat(1)>=100){
                instruccion = "UPDATE cuenta SET cuenta.Saldo = cuenta.Saldo - 100 WHERE cuenta.Id = "+padre.Id+";";
                bitacora.almacenarSentenciaSQL(instruccion);
                conexion.createStatement().executeUpdate(instruccion);
                instruccion = "INSERT INTO movimiento(movimiento.Cuenta_Id,movimiento.Fecha,movimiento.Monto,movimiento.Tipo) VALUES ("+padre.Id+",NOW(),"+100+",1);";
                bitacora.almacenarSentenciaSQL(instruccion);
                conexion.createStatement().executeUpdate(instruccion);
                conexion.createStatement().executeUpdate("COMMIT");
                bitacora.finalizar(Transaccion.COMPROMETIDA);
                padre.mensaje("<html><body>Transacci√≥n Realizada<br>Que tenga un buen dia</body></html>", 1);
            }else{
                conexion.createStatement().executeUpdate("ROLLBACK");
                bitacora.finalizar(Transaccion.ABORTADA);
                padre.mensaje("<html><body>Lo sentimos no tiene<br>fondos suficientes<br>Que tenga un buen dia</body></html>", 1);
            }
        } catch (SQLException ex) {
            bitacora.finalizar(Transaccion.FALLIDA);
            Logger.getLogger(Retiro.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jLabel3KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel3KeyPressed

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        try {
            String instruccion;
            conexion.createStatement().executeUpdate("START TRANSACTION");
            bitacora.iniciar();
            instruccion = "SELECT cuenta.Saldo FROM cuenta WHERE cuenta.Id = "+padre.Id+";";
            bitacora.almacenarSentenciaSQL(instruccion);
            ResultSet Rsaldo = conexion.createStatement().executeQuery(instruccion);
            Rsaldo.next();
            if(Rsaldo.getFloat(1)>=200){
                instruccion = "UPDATE cuenta SET cuenta.Saldo = cuenta.Saldo - 200 WHERE cuenta.Id = "+padre.Id+";";
                bitacora.almacenarSentenciaSQL(instruccion);
                conexion.createStatement().executeUpdate(instruccion);
                instruccion = "INSERT INTO movimiento(movimiento.Cuenta_Id,movimiento.Fecha,movimiento.Monto,movimiento.Tipo) VALUES ("+padre.Id+",NOW(),"+200+",1);";
                bitacora.almacenarSentenciaSQL(instruccion);
                conexion.createStatement().executeUpdate(instruccion);
                conexion.createStatement().executeUpdate("COMMIT");
                bitacora.finalizar(Transaccion.COMPROMETIDA);
                padre.mensaje("<html><body>Transacci√≥n Realizada<br>Que tenga un buen dia</body></html>", 1);
            }else{
                conexion.createStatement().executeUpdate("ROLLBACK");
                bitacora.finalizar(Transaccion.ABORTADA);
                padre.mensaje("<html><body>Lo sentimos no tiene<br>fondos suficientes<br>Que tenga un buen dia</body></html>", 1);
            }
        } catch (SQLException ex) {
            bitacora.finalizar(Transaccion.FALLIDA);
            Logger.getLogger(Retiro.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        try {
            String instruccion;
            conexion.createStatement().executeUpdate("START TRANSACTION");
            bitacora.iniciar();
            instruccion = "SELECT cuenta.Saldo FROM cuenta WHERE cuenta.Id = "+padre.Id+";";
            bitacora.almacenarSentenciaSQL(instruccion);
            ResultSet Rsaldo = conexion.createStatement().executeQuery(instruccion);
            Rsaldo.next();
            if(Rsaldo.getFloat(1)>=300){
                instruccion = "UPDATE cuenta SET cuenta.Saldo = cuenta.Saldo - 300 WHERE cuenta.Id = "+padre.Id+";";
                bitacora.almacenarSentenciaSQL(instruccion);
                conexion.createStatement().executeUpdate(instruccion);
                instruccion = "INSERT INTO movimiento(movimiento.Cuenta_Id,movimiento.Fecha,movimiento.Monto,movimiento.Tipo) VALUES ("+padre.Id+",NOW(),"+300+",1);";
                bitacora.almacenarSentenciaSQL(instruccion);
                conexion.createStatement().executeUpdate(instruccion);
                conexion.createStatement().executeUpdate("COMMIT");
                bitacora.finalizar(Transaccion.COMPROMETIDA);
                padre.mensaje("<html><body>Transacci√≥n Realizada<br>Que tenga un buen dia</body></html>", 1);
            }else{
                conexion.createStatement().executeUpdate("ROLLBACK");
                bitacora.finalizar(Transaccion.ABORTADA);
                padre.mensaje("<html><body>Lo sentimos no tiene<br>fondos suficientes<br>Que tenga un buen dia</body></html>", 1);
            }
        } catch (SQLException ex) {
            bitacora.finalizar(Transaccion.FALLIDA);
            Logger.getLogger(Retiro.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        try {
            String instruccion;
            conexion.createStatement().executeUpdate("START TRANSACTION");
            bitacora.iniciar();
            instruccion = "SELECT cuenta.Saldo FROM cuenta WHERE cuenta.Id = "+padre.Id+";";
            bitacora.almacenarSentenciaSQL(instruccion);
            ResultSet Rsaldo = conexion.createStatement().executeQuery(instruccion);
            Rsaldo.next();
            if(Rsaldo.getFloat(1)>=500){
                instruccion = "UPDATE cuenta SET cuenta.Saldo = cuenta.Saldo - 500 WHERE cuenta.Id = "+padre.Id+";";
                bitacora.almacenarSentenciaSQL(instruccion);
                conexion.createStatement().executeUpdate(instruccion);
                instruccion = "INSERT INTO movimiento(movimiento.Cuenta_Id,movimiento.Fecha,movimiento.Monto,movimiento.Tipo) VALUES ("+padre.Id+",NOW(),"+500+",1);";
                bitacora.almacenarSentenciaSQL(instruccion);
                conexion.createStatement().executeUpdate(instruccion);
                conexion.createStatement().executeUpdate("COMMIT");
                bitacora.finalizar(Transaccion.COMPROMETIDA);
                padre.mensaje("<html><body>Transacci√≥n Realizada<br>Que tenga un buen dia</body></html>", 1);
            }else{
                conexion.createStatement().executeUpdate("ROLLBACK");
                bitacora.finalizar(Transaccion.ABORTADA);
                padre.mensaje("<html><body>Lo sentimos no tiene<br>fondos suficientes<br>Que tenga un buen dia</body></html>", 1);
            }
        } catch (SQLException ex) {
            bitacora.finalizar(Transaccion.FALLIDA);
            Logger.getLogger(Retiro.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        try {
            String instruccion;
            conexion.createStatement().executeUpdate("START TRANSACTION");
            bitacora.iniciar();
            instruccion = "SELECT cuenta.Saldo FROM cuenta WHERE cuenta.Id = "+padre.Id+";";
            bitacora.almacenarSentenciaSQL(instruccion);
            ResultSet Rsaldo = conexion.createStatement().executeQuery(instruccion);
            Rsaldo.next();
            if(Rsaldo.getFloat(1)>=1000){
                instruccion = "UPDATE cuenta SET cuenta.Saldo = cuenta.Saldo - 1000 WHERE cuenta.Id = "+padre.Id+";";
                bitacora.almacenarSentenciaSQL(instruccion);
                conexion.createStatement().executeUpdate(instruccion);
                instruccion = "INSERT INTO movimiento(movimiento.Cuenta_Id,movimiento.Fecha,movimiento.Monto,movimiento.Tipo) VALUES ("+padre.Id+",NOW(),"+1000+",1);";
                bitacora.almacenarSentenciaSQL(instruccion);
                conexion.createStatement().executeUpdate(instruccion);
                conexion.createStatement().executeUpdate("COMMIT");
                bitacora.finalizar(Transaccion.COMPROMETIDA);
                padre.mensaje("<html><body>Transacci√≥n Realizada<br>Que tenga un buen dia</body></html>", 1);
            }else{
                conexion.createStatement().executeUpdate("ROLLBACK");
                bitacora.finalizar(Transaccion.ABORTADA);
                padre.mensaje("<html><body>Lo sentimos no tiene<br>fondos suficientes<br>Que tenga un buen dia</body></html>", 1);
            }
        } catch (SQLException ex) {
            bitacora.finalizar(Transaccion.FALLIDA);
            Logger.getLogger(Retiro.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        try {
            String instruccion;
            conexion.createStatement().executeUpdate("START TRANSACTION");
            bitacora.iniciar();
            instruccion = "SELECT cuenta.Saldo FROM cuenta WHERE cuenta.Id = "+padre.Id+";";
            bitacora.almacenarSentenciaSQL(instruccion);
            ResultSet Rsaldo = conexion.createStatement().executeQuery(instruccion);
            Rsaldo.next();
            if(Rsaldo.getFloat(1)>=2000){
                instruccion = "UPDATE cuenta SET cuenta.Saldo = cuenta.Saldo - 2000 WHERE cuenta.Id = "+padre.Id+";";
                bitacora.almacenarSentenciaSQL(instruccion);
                conexion.createStatement().executeUpdate(instruccion);
                instruccion = "INSERT INTO movimiento(movimiento.Cuenta_Id,movimiento.Fecha,movimiento.Monto,movimiento.Tipo) VALUES ("+padre.Id+",NOW(),"+2000+",1);";
                bitacora.almacenarSentenciaSQL(instruccion);
                conexion.createStatement().executeUpdate(instruccion);
                conexion.createStatement().executeUpdate("COMMIT");
                bitacora.finalizar(Transaccion.COMPROMETIDA);
                padre.mensaje("<html><body>Transacci√≥n Realizada<br>Que tenga un buen dia</body></html>", 1);
            }else{
                conexion.createStatement().executeUpdate("ROLLBACK");
                bitacora.finalizar(Transaccion.ABORTADA);
                padre.mensaje("<html><body>Lo sentimos no tiene<br>fondos suficientes<br>Que tenga un buen dia</body></html>", 1);
            }
        } catch (SQLException ex) {
            bitacora.finalizar(Transaccion.FALLIDA);
            Logger.getLogger(Retiro.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        padre.mensaje("Feliz dia", 1);
    }//GEN-LAST:event_jLabel7MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    // End of variables declaration//GEN-END:variables
}
